// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/endpoint.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/endpoint.go -destination=internal/service/mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "order/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockService) GetOrder(ctx context.Context, orderUID string) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderUID)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockServiceMockRecorder) GetOrder(ctx, orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockService)(nil).GetOrder), ctx, orderUID)
}

// LoadCacheFromDB mocks base method.
func (m *MockService) LoadCacheFromDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCacheFromDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadCacheFromDB indicates an expected call of LoadCacheFromDB.
func (mr *MockServiceMockRecorder) LoadCacheFromDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCacheFromDB", reflect.TypeOf((*MockService)(nil).LoadCacheFromDB), ctx)
}

// ProcessOrder mocks base method.
func (m *MockService) ProcessOrder(ctx context.Context, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockServiceMockRecorder) ProcessOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockService)(nil).ProcessOrder), ctx, order)
}
